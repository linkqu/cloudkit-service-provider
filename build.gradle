buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'net.cloudkit'
// version '1.0-SNAPSHOT'
version '1.0.' + buildVersion() + '-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// MANIFEST.MF 配置信息
war {
    manifest {
        attributes 'Implementation-Vendor': 'The Test Project', 'Implementation-Title': 'Test', 'Implementation-Version': version, 'Implementation-Vendor-Id': '', 'Built-By': 'norman', 'Build-Jdk': '1.8', 'Created-By': 'Gradle 2.6', 'Archiver-Version': 'Plexus Archiver'
    }
}

dependencies {

    // providedCompile 是在 war 插件下定义的
    /*
    providedCompile(
        'javax.servlet:javax.servlet-api:4.0.1',
        'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3',
        'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.2',
    )
    */

    compile(
        'org.springframework.boot:spring-boot-starter-aop:2.0.4.RELEASE',
        'org.springframework.boot:spring-boot-starter-jdbc:2.0.4.RELEASE',
        'org.springframework.boot:spring-boot-starter-validation:2.0.4.RELEASE',
        'org.springframework.boot:spring-boot-starter-web:2.0.4.RELEASE',
        'org.springframework.boot:spring-boot-starter-web-services:2.0.4.RELEASE'
    )

    compile(
        'org.springframework:spring-core:5.0.8.RELEASE',
        'org.springframework:spring-beans:5.0.8.RELEASE',
        'org.springframework:spring-tx:5.0.8.RELEASE',
        'org.springframework:spring-context:5.0.8.RELEASE',
        'org.springframework:spring-context-support:5.0.8.RELEASE',
        'org.springframework:spring-aop:5.0.8.RELEASE',
        'org.springframework:spring-aspects:5.0.8.RELEASE',
        'org.springframework:spring-jdbc:5.0.8.RELEASE',
        'org.springframework:spring-oxm:5.0.8.RELEASE',
        'org.springframework:spring-web:5.0.8.RELEASE',
        'org.springframework:spring-webmvc:5.0.8.RELEASE',

        'org.springframework.ws:spring-ws:3.0.3.RELEASE',
        // 'org.springframework.ws:spring-ws-core:3.0.3.RELEASE',

        'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.5',

        'org.apache.cxf:cxf-core:3.2.6',
        'org.apache.cxf:cxf-rt-transports-http:3.2.6',
        'org.apache.cxf:cxf-rt-frontend-jaxws:3.2.6',

        // 忽略common log，使用slf4j代替
        'ch.qos.logback:logback-classic:1.2.3',
        'ch.qos.logback:logback-core:1.2.3',
        // 代码直接调用commons-logging会被桥接到slf4j
        'org.slf4j:jcl-over-slf4j:1.7.25',
        // 代码直接调用log4j会被桥接到slf4j
        'org.slf4j:log4j-over-slf4j:1.7.25',
        'org.slf4j:jul-to-slf4j:1.7.25',
        // 代码直接调用java.utils.logging会被桥接到slf4j
        'org.slf4j:slf4j-api:1.7.25',
        'org.logback-extensions:logback-ext-spring:0.1.5',

        'com.alibaba:druid:1.1.10',
        'mysql:mysql-connector-java:5.1.34',
    )

    compile('com.sun.xml.ws:sdo-eclipselink-plugin:2.3.0.2') {
        exclude group: 'commonj.sdo'
    }
    compile('com.sun.xml.ws:jaxws-ri:2.3.0.2') {
        exclude group: 'commonj.sdo'
    }

    // compile 'javax.servlet:javax.servlet-api:4.0.1'

    compile 'org.apache.tomcat.embed:tomcat-embed-core:9.0.11'
    compile 'org.apache.tomcat.embed:tomcat-embed-el:9.0.11'
    compile 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.11'

    testCompile(
        'org.springframework:spring-test:5.0.8.RELEASE',
        'junit:junit:4.12',
    )

}

def static buildVersion() {
    return new Date().format('yyyyMMddHH', TimeZone.getTimeZone('UTC'))
}

// 如果你想配置你自己制定的Gradle 版本，加入以下配置，然后在导入工程时选择 use customizable gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

// 禁用 gradle build 执行测试任务
test.enabled = false

//task listJars(description: '#Display all compile jars.') {
//    println description
//    configurations.compile.each { File file -> println file.name }
//}

//task createJavaProject {
//    sourceSets*.java.srcDirs*.each { it.mkdirs() }
//    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
//}
//
//task createWebProject (dependsOn: 'createJavaProject') {
//    def webAppDir = file('$webAppDirName')
//    webAppDir.mkdirs()
//}
